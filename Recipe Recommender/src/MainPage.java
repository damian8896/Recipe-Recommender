
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author damianchng
 */

//Start page of program. Primary function of storing recipes is in this page. Rest of pages are secondary functions
public class MainPage extends javax.swing.JFrame {

    private TreeSet<Recipe> sortedRecipes; //Treeset of recipes that are sorted
    private HashMap<String, Recipe> recipeStorage; //Hashmap of recipes for retrieving recipe objects
    private HashMap<String, Ingredient> ingredients; //Hashmap of ingredients for retrieving ingredient objects

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();

        //init treeset and hashset
        sortedRecipes = new TreeSet<>(new RatingComparator());
        recipeStorage = new HashMap<>();
        ingredients = new HashMap<>();

        //init scanner
        Scanner in = null;
        try {
            in = new Scanner(new File("ingredients.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Retrieving ingredients from text file
        while (in.hasNextLine()) {
            String input = in.nextLine();
            try {
                ingredients.put(input.substring(0, input.indexOf(":")),
                        new Ingredient(input.substring(0, input.indexOf(":")), Double.parseDouble(input.substring(input.indexOf(":") + 2))));
            } catch (NumberFormatException ex) {
                continue;
            }
        }

        //init scanner
        try {
            in = new Scanner(new File("recipes.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Go through each line & add to treeset/hashmap
        while (in.hasNextLine()) {
            //each line
            String input = in.nextLine();

            Recipe recipe = getRecipe(input);

            if (recipe == null) {
                continue;
            } else {
                //add recipe to treeset/hashmap
                sortedRecipes.add(recipe);
                recipeStorage.put(recipe.getName(), recipe);
            }
        }

        //update JList
        display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listRecipes = new javax.swing.JList<>();
        sortChoice = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnAnalyze = new javax.swing.JButton();
        btnMarket = new javax.swing.JButton();
        btnSchedule = new javax.swing.JButton();
        lblSchedule = new javax.swing.JLabel();
        lblAnalyze = new javax.swing.JLabel();
        lblMarket = new javax.swing.JLabel();
        btnSort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        title.setText("MyRecipes");

        listRecipes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listRecipes);

        sortChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rating", "Ingredient", "Cook Time", "Price", "Category" }));
        sortChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortChoiceActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnAnalyze.setIcon(new javax.swing.ImageIcon("/Users/damianchng/Desktop/ATCS Folder/Final Project/images/Analyze.png")); // NOI18N
        btnAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyzeActionPerformed(evt);
            }
        });

        btnMarket.setIcon(new javax.swing.ImageIcon("/Users/damianchng/Desktop/ATCS Folder/Final Project/images/Supermarket.png")); // NOI18N
        btnMarket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarketActionPerformed(evt);
            }
        });

        btnSchedule.setIcon(new javax.swing.ImageIcon("/Users/damianchng/Desktop/ATCS Folder/Final Project/images/Schedule.png")); // NOI18N
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        lblSchedule.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSchedule.setText("Schedule");

        lblAnalyze.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnalyze.setText("Analyze");

        lblMarket.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMarket.setText("Market");

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSchedule))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(lblAnalyze, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAnalyze)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnMarket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(153, 153, 153))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sortChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(title))
                        .addGap(185, 185, 185))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSchedule)
                    .addComponent(lblAnalyze)
                    .addComponent(lblMarket))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMarket, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSchedule)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnalyze)))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sortChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortChoiceActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_sortChoiceActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        //Gets all info to create user

        //name
        String name = JOptionPane.showInputDialog("Enter name:");

        //rating
        double rating = 0;
        try {
            rating = Double.parseDouble(JOptionPane.showInputDialog("Enter rating (0.0-10.0):"));
            if (rating < 0 || rating > 10) {
                JOptionPane.showMessageDialog(this, "You didn't type a correct rating");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You didn't type a correct rating");
            return;
        }

        //time
        int time = 0;
        try {
            time = Integer.parseInt(JOptionPane.showInputDialog("Enter time(mins):"));
            if (time <= 0) {
                JOptionPane.showMessageDialog(this, "You didn't type a correct time");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You didn't type a correct time");
            return;
        }

        //category
        String input = JOptionPane.showInputDialog("Enter category(STARTER, MAIN, DESERT):");
        Category cat = Category.getCategory(input);
        if (cat == null) {
            JOptionPane.showMessageDialog(this, "You didn't type a correct category");
            return;
        }

        //ingredients
        input = JOptionPane.showInputDialog("Enter ingredients ([name price, name price, name price, ...]");
        LinkedList<Ingredient> ing = new LinkedList<Ingredient>();
        try {
            String[] ingStr = input.substring(input.indexOf("[") + 1).split(" ");
            for (int i = 0; i < ingStr.length; i += 2) {
                //Separating price and name of ingredient
                String ingName = ingStr[i];
                double ingPrice = 0;

                if (i + 1 != ingStr.length - 1) {
                    try {
                        ingPrice = Double.parseDouble(ingStr[i + 1].substring(0, ingStr[i + 1].indexOf(",")));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "You didn't type a correct ingredient");
                        return;
                    }
                } else {
                    try {
                        ingPrice = Double.parseDouble(ingStr[i + 1].substring(0, ingStr[i + 1].indexOf("]")));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "You didn't type a correct ingredient");
                        return;
                    }
                }

                //Checking if ingredient exists in ingredient database
                if (ingredients.get(ingName) == null) {
                    //if no, add it
                    ingredients.put(ingName, new Ingredient(ingName, ingPrice));
                    PrintWriter out = null;
                    try {
                        out = new PrintWriter(new FileWriter("ingredients.txt", true));
                    } catch (IOException ex) {
                        Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    out.println(ingredients.get(ingName));
                    out.close();
                }
                //Use ingredient database to retrieve ingredient object. Step is neccesary for hashsets
                ing.add(ingredients.get(ingName));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You didn't type in the correct format");
            return;
        }

        //add to treeset
        Recipe recipe = new Recipe(name, rating, ing, time, cat);
        recipeStorage.put(name, recipe);

        //check if was added
        if (sortedRecipes.add(recipe)) {
            //add to jlist
            display();

            //print in text file
            PrintWriter out = null;
            try {
                out = new PrintWriter(new FileWriter("recipes.txt", true));
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            out.println(recipe);
            out.close();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
        //Open schedule page
        new SchedulePage(ingredients, sortedRecipes, recipeStorage).setVisible(true);
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // TODO add your handling code here:

        //Create sub treeset for new comparator
        TreeSet<Recipe> sub = new TreeSet<>(new RatingComparator());
        String choice = sortChoice.getSelectedItem().toString();

        //change comparator based on choice
        if (choice.equals("Ingredient")) {
            sub = new TreeSet<>(new IngredientComparator());
        } else if (choice.equals("Cook Time")) {
            sub = new TreeSet<>(new TimeComparator());
        } else if (choice.equals("Price")) {
            sub = new TreeSet<>(new PriceComparator());
        } else if (choice.equals("Category")) {
            sub = new TreeSet<>(new CategoryComparator());
        }

        //copy all values to sub treeset
        sub.addAll(sortedRecipes);

        //set sortedRecipes to sub treeset with new comparator
        sortedRecipes = sub;

        //add to jlist
        display();
    }//GEN-LAST:event_btnSortActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //name
        String name = JOptionPane.showInputDialog("Enter name:");

        //use name to get recipe from Hashmap
        Recipe recipe = recipeStorage.get(name);

        //if no recipe is found
        if (recipe == null) {
            JOptionPane.showMessageDialog(this, "No recipe found");
            return;
        }

        //Remove recipe from all necessary data structures
        sortedRecipes.remove(recipe);
        removeLine(recipe.toString());
        recipeStorage.remove(name);
        display();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        btnDeleteActionPerformed(evt);
        btnAddActionPerformed(evt);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalyzeActionPerformed
        // TODO add your handling code here:
        //Open analyze page
        new AnalyzePage(sortedRecipes).setVisible(true);
    }//GEN-LAST:event_btnAnalyzeActionPerformed

    private void btnMarketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarketActionPerformed
        // TODO add your handling code here:
        //Open market page
        new MarketPage(sortedRecipes, ingredients, recipeStorage).setVisible(true);
    }//GEN-LAST:event_btnMarketActionPerformed

    //Removes a line from text file
    private static void removeLine(String lineToRemove) {
        File current = new File("recipes.txt");
        File temp = new File(current.getAbsolutePath() + ".txt");

        Scanner in = null;
        try {
            in = new Scanner(new File("recipes.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(temp));
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        while (in.hasNextLine()) {
            String line = in.nextLine();
            if (!line.equals(lineToRemove)) {
                out.println(line);
            }
        }
        in.close();
        out.close();
        current.delete();
        temp.renameTo(current);
    }

    //Updates/Displays the JList
    private void display() {
        DefaultListModel mod = new DefaultListModel();
        for (Recipe str : sortedRecipes) {
            mod.addElement(str);
        }
        listRecipes.setModel(mod);
    }

    //Creates a recipe using a string
    private Recipe getRecipe(String input) {
        //split ingredients from rest of data
        String[] vars = input.substring(input.indexOf(":") + 1, input.indexOf("[")).split(" ");

        //name
        String name = input.substring(0, input.indexOf(":"));

        //rating
        double rating = 0;
        try {
            rating = Double.parseDouble(vars[1]);
        } catch (NumberFormatException e) {
            return null;
        }

        //time
        int time = 0;
        try {
            time = Integer.parseInt(vars[3]);
        } catch (NumberFormatException e) {
            return null;
        }

        //price
        double price = 0;
        String priceStr = vars[5].substring(1, vars[5].indexOf(","));
        try {
            price = Double.parseDouble(priceStr);
        } catch (NumberFormatException e) {
            return null;
        }

        //category
        Category cat = Category.getCategory(vars[6].substring(0, vars[6].indexOf(",")));
        if (cat == null) {
            return null;
        }

        //ingredients
        LinkedList<Ingredient> ing = new LinkedList<Ingredient>();
        String[] ingStr = input.substring(input.indexOf("[") + 1).split(" ");
        for (int i = 0; i < ingStr.length; i++) {
            String ingName = "";

            if (i != ingStr.length - 1) {
                ingName = ingStr[i].substring(0, ingStr[i].indexOf(","));
            } else {
                ingName = ingStr[i].substring(0, ingStr[i].indexOf("]"));
            }

            //retrieve ingredient from hashmap. Step is necessary for hashsets
            ing.add(ingredients.get(ingName));
        }
        return new Recipe(name, rating, ing, price, time, cat);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAnalyze;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMarket;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JButton btnSort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnalyze;
    private javax.swing.JLabel lblMarket;
    private javax.swing.JLabel lblSchedule;
    private javax.swing.JList<String> listRecipes;
    private javax.swing.JComboBox<String> sortChoice;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
