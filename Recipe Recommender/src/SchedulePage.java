
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author damianchng
 */

//JFrame used for displaying schedule. Can edit schedule & can also vie cheklists for each day.
public class SchedulePage extends javax.swing.JFrame {

    private HashMap<String, Ingredient> ingredients; //Hashmap of ingredients for retrieving ingredient objects
    private PriorityQueue<Recipe> rec; //priority queue of recipes used for recommend function
    private ArrayList<Recipe> rand; //arraylist of recipes used for random function
    private Schedule schedule; //schedule object
    private TreeSet<Recipe> sortedRecipes; //Treeset of recipes that are sorted
    private HashMap<String, Recipe> recipeStorage; //Hashmap of recipes for retrieving recipe objects
    /**
     * Creates new form SchedulePage
     * @param ingredients
     * @param sortedRecipes
     * @param recipeStorage
     */
    public SchedulePage(HashMap<String, Ingredient> ingredients, TreeSet<Recipe> sortedRecipes, HashMap<String, Recipe> recipeStorage) {
        initComponents();
        //ensure program doesn't stop when closed
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        
        //init treeset and hashmap
        this.ingredients = ingredients;
        this.sortedRecipes = sortedRecipes;
        this.recipeStorage = recipeStorage;
        
        //init scanner
        Scanner in = null;
        try {
            //scan through schedule file
            in = new Scanner(new File("schedule.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        //create new schedule
        schedule = new Schedule();
        for(int i = 0; i < 5; i++){
            //go through schedule file and add all recipes to schedule
            String input = in.nextLine();
            String name = input;
            String[] recipes = new String[]{in.nextLine(), in.nextLine(), in.nextLine()};
            schedule.addDay(new Day(name, getRecipe(recipes[0]), getRecipe(recipes[1]), getRecipe(recipes[2])), i);
        }
        
        //init priorityqueue and arraylist
        rec = new PriorityQueue<>(new RecComparator(getSchedule()));
        rand = new ArrayList<>();
        try {
            //scan through recipes file
            in = new Scanner(new File("recipes.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        while(in.hasNextLine()){
            //each line
            String input = in.nextLine();

            Recipe recipe = getRecipe(input);
                    
            if(recipe == null){
                continue;
            }else{
                //add recipe to priority queue/arraylist
                rec.add(recipe);
                rand.add(recipe);
            }
        }
        
        //update jtable
        display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        lblDay = new javax.swing.JLabel();
        choiceDay = new javax.swing.JComboBox<>();
        btnEdit = new javax.swing.JButton();
        btnChecklist = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setIcon(new javax.swing.ImageIcon("/Users/damianchng/Desktop/ATCS Folder/Final Project/images/Schedule.png")); // NOI18N
        title.setText("Schedule");

        scheduleTable.setAutoCreateRowSorter(true);
        scheduleTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {"", null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }
        ));
        scheduleTable.setGridColor(new java.awt.Color(0, 0, 0));
        scheduleTable.setRowHeight(100);
        scheduleTable.setShowGrid(true);
        jScrollPane2.setViewportView(scheduleTable);

        lblDay.setText("Day");

        choiceDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnChecklist.setText("Checklist");
        btnChecklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChecklistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(164, 164, 164))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblDay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choiceDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChecklist)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDay)
                    .addComponent(choiceDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit)
                    .addComponent(btnChecklist))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        //Create a day page to edit day
        new DayPage(this, rec, rand, getSchedule().getWeek()[choiceDay.getSelectedIndex()], sortedRecipes, recipeStorage).setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnChecklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChecklistActionPerformed
        // TODO add your handling code here:
        //Create a checklist to show ingredients
        new ChecklistPage(getSchedule().getWeek()[choiceDay.getSelectedIndex()]).setVisible(true);
    }//GEN-LAST:event_btnChecklistActionPerformed

    /**
     *
     * @param day
     */
    public void back(Day day){
        //Retrieve data back from day page
        //Make the change
        String name = day.getDayOfWeek();
        if(name.equals("Monday")){
            getSchedule().addDay(day, 0);
        }else if(name.equals("Tuesday")){
            getSchedule().addDay(day, 1);
        }else if(name.equals("Wednesday")){
            getSchedule().addDay(day, 2);
        }else if(name.equals("Thursday")){
            getSchedule().addDay(day, 3);
        }else if(name.equals("Friday")){
            getSchedule().addDay(day, 4);
        }
        display();
        
        //Make new priority queue based on new schedule
        PriorityQueue<Recipe> sub = new PriorityQueue<>(new RecComparator(schedule));
        sub.addAll(rec);
        rec = sub;
        
        //print in text file
        File current = new File("schedule.txt");
        File temp = new File(current.getAbsolutePath() + ".txt");

        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(temp));
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        Day[] week = getSchedule().getWeek();
        for(int i = 0; i < week.length; i++){
            out.println(week[i].getDayOfWeek());
            if(week[i].getBreakfast() != null){
                out.println(week[i].getBreakfast());
            }else{
                out.println("null");
            }
            
            if(week[i].getLunch() != null){
                out.println(week[i].getLunch());
            }else{
                out.println("null");
            }
            
            if(week[i].getDinner() != null){
                out.println(week[i].getDinner());
            }else{
                out.println("null");
            }
        }
        
        out.close();
        current.delete();
        temp.renameTo(current);
    }
    
    private Recipe getRecipe(String input) {
        if(input.equals("null")){
            return null;
        }
        //split ingredients from rest of data
        String[] vars = input.substring(input.indexOf(":") + 1, input.indexOf("[")).split(" ");

        //name
        String name = input.substring(0, input.indexOf(":"));

        //rating
        double rating = 0;
        try {
            rating = Double.parseDouble(vars[1]);
        } catch (NumberFormatException e) {
            return null;
        }

        //time
        int time = 0;
        try {
            time = Integer.parseInt(vars[3]);
        } catch (NumberFormatException e) {
            return null;
        }

        //price
        double price = 0;
        String priceStr = vars[5].substring(1, vars[5].indexOf(","));
        try {
            price = Double.parseDouble(priceStr);
        } catch (NumberFormatException e) {
            return null;
        }

        //category
        Category cat = Category.getCategory(vars[6].substring(0, vars[6].indexOf(",")));
        if (cat == null) {
            return null;
        }

        //ingredients
        LinkedList<Ingredient> ing = new LinkedList<Ingredient>();
        String[] ingStr = input.substring(input.indexOf("[") + 1).split(" ");
        for (int i = 0; i < ingStr.length; i++) {
            String ingName = "";

            if (i != ingStr.length - 1) {
                ingName = ingStr[i].substring(0, ingStr[i].indexOf(","));
            } else {
                ingName = ingStr[i].substring(0, ingStr[i].indexOf("]"));
            }

            ing.add(ingredients.get(ingName));
        }
        return new Recipe(name, rating, ing, price, time, cat);
    }

    //display jtable
    private void display(){
        Day[] week = getSchedule().getWeek();
        String[][] display = new String[3][5];
        for(int i = 0; i < 5; i++){
            if(week[i].getBreakfast() != null){
                display[0][i] = week[i].getBreakfast().getName();
            }else{
                display[0][i] = null;
            }
            
            if(week[i].getLunch() != null){
                display[1][i] = week[i].getLunch().getName();
            }else{
                display[1][i] = null;
            }
            
            if(week[i].getDinner() != null){
                display[2][i] = week[i].getDinner().getName();
            }else{
                display[2][i] = null;
            }
        }
        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            display,
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }));
    }
    
    
    /**
     * @return the schedule
     */
    public Schedule getSchedule() {
        return schedule;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChecklist;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> choiceDay;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDay;
    private javax.swing.JTable scheduleTable;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

}
