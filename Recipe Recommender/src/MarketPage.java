
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.System.in;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Stack;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author damianchng
 */
//Market JFrame used for adding/removing supermarkets to program and for finding smallest route to get all ingredients
public class MarketPage extends javax.swing.JFrame {

    private LinkedList<Supermarket> market; //List of supermarkets stored in program
    private HashMap<String, Ingredient> ingredients; //Hashmap of ingredients used for ingredient object retrival
    private HashMap<String, Recipe> recipeStorage; //Hashmap of recipes used for recipe object retrieval
    private TreeSet<Recipe> sortedRecipes; //Treeset of recipes are used for jcombobox

    /**
     * Creates new form MarketPage
     *
     * @param sortedRecipes
     * @param ingredients
     * @param recipeStorage
     */
    public MarketPage(TreeSet<Recipe> sortedRecipes, HashMap<String, Ingredient> ingredients,
            HashMap<String, Recipe> recipeStorage) {
        initComponents();
        //Ensures program doesn't stop whe =n window closes
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        //init all variables
        this.ingredients = ingredients;
        this.sortedRecipes = sortedRecipes;
        this.recipeStorage = recipeStorage;
        market = new LinkedList<>();

        //init scanner
        Scanner in = null;
        try {
            in = new Scanner(new File("supermarkets.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Scan through supermarkets textfile
        while (in.hasNextLine()) {
            String input = in.nextLine();
            String name = input.substring(0, input.indexOf("["));
            HashSet<Ingredient> ing = new HashSet<Ingredient>();
            String[] ingStr = input.substring(input.indexOf("[") + 1).split(" ");
            for (int i = 0; i < ingStr.length; i++) {
                String ingName = "";

                if (i != ingStr.length - 1) {
                    ingName = ingStr[i].substring(0, ingStr[i].indexOf(","));
                } else {
                    ingName = ingStr[i].substring(0, ingStr[i].indexOf("]"));
                }
                //retreive ingredients object from hashmap
                ing.add(ingredients.get(ingName));
            }
            //add supermarkets to list
            market.add(new Supermarket(name, ing));
        }

        //update JComboBox
        for (Recipe i : sortedRecipes) {
            recipeBox.addItem(i.getName());
        }
        //display list of supermarkets
        display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        marketList = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        recipeBox = new javax.swing.JComboBox<>();
        btnTravel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setIcon(new javax.swing.ImageIcon("/Users/damianchng/Desktop/ATCS Folder/Final Project/images/Supermarket.png")); // NOI18N
        title.setText("Market");

        marketList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(marketList);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnTravel.setText("Travel");
        btnTravel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTravelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(149, 149, 149))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnTravel)
                            .addComponent(recipeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recipeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTravel)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        //name
        String name = JOptionPane.showInputDialog("Enter name:");

        //ingredients
        String input = JOptionPane.showInputDialog("Enter ingredients ([name price, name price, name price, ...]");
        HashSet<Ingredient> ing = new HashSet<Ingredient>();
        try {
            String[] ingStr = input.substring(input.indexOf("[") + 1).split(" ");
            for (int i = 0; i < ingStr.length; i += 2) {
                String ingName = ingStr[i];
                double ingPrice = 0;

                if (i + 1 != ingStr.length - 1) {
                    try {
                        ingPrice = Double.parseDouble(ingStr[i + 1].substring(0, ingStr[i + 1].indexOf(",")));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "You didn't type a correct ingredient");
                        break;
                    }
                } else {
                    try {
                        ingPrice = Double.parseDouble(ingStr[i + 1].substring(0, ingStr[i + 1].indexOf("]")));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "You didn't type a correct ingredient");
                        break;
                    }
                }

                //checking if hashmap contains ingredient
                if (ingredients.get(ingName) == null) {
                    //if not, add to ingredients text file
                    ingredients.put(ingName, new Ingredient(ingName, ingPrice));
                    PrintWriter out = null;
                    try {
                        out = new PrintWriter(new FileWriter("ingredients.txt", true));
                    } catch (IOException ex) {
                        Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    out.println(ingredients.get(ingName));
                    out.close();
                }
                //Retreieve ingredient object and add to linkedlist
                ing.add(ingredients.get(ingName));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You didn't type in the correct format");
            return;
        }
        //add supermarket to list
        Supermarket m = new Supermarket(name, ing);
        market.add(m);
        //add to jlist
        display();

        //print in text file
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter("supermarkets.txt", true));
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println(m);
        out.close();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //name
        String name = JOptionPane.showInputDialog("Enter name:");

        //use name to get supermarket from Hashmap
        Supermarket m = null;
        for (Supermarket i : market) {
            if (i.getName().equals(name)) {
                m = i;
                break;
            }
        }

        if (m == null) {
            JOptionPane.showMessageDialog(this, "No recipe found");
            return;
        }

        //remove supermarket from Hashmap
        market.remove(m);
        removeLine(m.toString());
        display();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnTravelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTravelActionPerformed
        // TODO add your handling code here:
        //Reverse greatest-smallest
        Stack<Supermarket> path = new Stack<>();

        //Making sure original recipe isn't altered
        LinkedList<Ingredient> temp = recipeStorage.get(recipeBox.getSelectedItem().toString()).getIngredients();
        LinkedList<Ingredient> ing = new LinkedList(temp);
        
        //repeat until all ingredients accounted for
        while (ing.size() > 0) {
            int max = 0;
            Supermarket similar = null;
            //checking to see which supermarket has most similar ingredients
            for (Supermarket i : market) {
                int count = 0;
                for (Ingredient j : ing) {
                    if (i.getProducts().contains(j)) {
                        count++;
                    }
                }
                if (similar == null || count > max) {
                    similar = i;
                    max = count;
                }
            }

            //remove all similar ingredients from supermarket and recipe
            Iterator<Ingredient> it = ing.iterator();
            int size = ing.size();
            while (it.hasNext()) {
                Ingredient i = it.next();
                if (similar.getProducts().contains(i)) {
                    it.remove();
                }
            }
            
            //if no ingredients are removed, means no supermarket has the ingredients
            if (size == ing.size()) {
                JOptionPane.showMessageDialog(this, "Supermarkets don't contain these ingredients");
                return;
            }
            
            //Push onto stack
            path.push(similar);
        }
        
        //Display path
        String str = path.pop().getName();
        for (Supermarket i : path) {
            str += " => " + i.getName();
        }
        JOptionPane.showMessageDialog(this, "Route is " + str);
    }//GEN-LAST:event_btnTravelActionPerformed

    //Updating list of supermarkets
    private void display() {
        DefaultListModel mod = new DefaultListModel();
        for (Supermarket str : market) {
            mod.addElement(str);
        }
        marketList.setModel(mod);
    }

    //Removes a line from text file
    private static void removeLine(String lineToRemove) {
        File current = new File("recipes.txt");
        File temp = new File(current.getAbsolutePath() + ".txt");

        Scanner in = null;
        try {
            in = new Scanner(new File("recipes.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(temp));
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        while (in.hasNextLine()) {
            String line = in.nextLine();
            if (!line.equals(lineToRemove)) {
                out.println(line);
            }
        }
        in.close();
        out.close();
        current.delete();
        temp.renameTo(current);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnTravel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> marketList;
    private javax.swing.JComboBox<String> recipeBox;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
